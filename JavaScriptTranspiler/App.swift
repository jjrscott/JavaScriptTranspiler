//
//  App.swift
//  JavaScriptTranspiler
//
//  Created by John Scott on 15/12/2022.
//

import Cocoa
import JavaScriptCore

@main
class MyApp {
    static func main() throws {
        guard let context = JSContext() else { fatalError() }
        context.exceptionHandler = { (_, error) in
            print(error, error?.objectForKeyedSubscript("message"), error?.objectForKeyedSubscript("line"))
        }
        
        let bridge: @convention(block) (String, [Any]) -> Any? = { action, arguments in
            switch action {
            case "print":
                print(arguments)
                return nil
            default: fatalError()
            }
            
        }
        context.setObject(bridge, forKeyedSubscript: "bridge" as NSString)

        
        let discountedPrice: @convention(block) (JSValue, JSValue) -> Float = { price, discount in
            return 0
        }
        context.setObject(object: discountedPrice, withName: "discountedPrice")
        
        
        context.evaluateScript("function print() { bridge('print', arguments) }")

        let sourceCodeUrl = Bundle.main.url(forResource: "esprima", withExtension: "js")!
        let sourceCode = try! String(contentsOf: sourceCodeUrl)
        let foo = context.evaluateScript(sourceCode, withSourceURL: sourceCodeUrl)
        
//        print(context.objectForKeyedSubscript("esprima").toObject())

        
//        print(context.objectForKeyedSubscript("esprima").toObject())
        
        if let result = context.objectForKeyedSubscript("esprima").objectForKeyedSubscript("parse").call(withArguments: [source, NSDictionary()])
            ,
           let root = result.toObject()
        {
            if let foo = try! Program.decode(node: root) as? Program {
                print(foo)
                print(foo.swiftCode)
            }
//            visit(node: root)
//            print(root)
            
            
            
//            print("Hello: \(root)")
        }
    }
    
    static func visit(node: Any?, stack: [(type: String, key: String)] = []) {
        if let object = node as? [String: Any] {
            guard let type = object["type"] as? String else {
                fatalError()
                
            }
            
            for (key, value) in object {
                if key == "type" { continue }
                visit(node: value, stack: stack + [(type: type, key: key)])
            }
//
//            switch type {
//            case "Program": visit(node: object["body"], stack: stack + [type])
//            case "Identifier": visit(node: object["name"], stack: stack + [type])
//            case "BlockStatement": visit(node: object["body"], stack: stack + [type])
//            case "FunctionDeclaration": visit(node: object["body"], stack: stack + [type])
//            default: fatalError(object.description)
//            }
        } else if let array = node as? [Any] {
            for subnode in array {
                visit(node: subnode, stack: stack)
            }
        } else {
            print("\(stack) = \(String(describing: node))")
        }
    }
        
    static let source = #"""

var font = {
    '0':`
00000
00000
00000
01110
10001
10011
10101
11001
10001
01110
00000
00000`,
    '1':`
00000
00000
00000
11100
00100
00100
00100
00100
00100
11111
00000
00000`,
    '2':`
00000
00000
00000
11110
00001
00001
01110
10000
10000
11111
00000
00000`,
    '3':`
00000
00000
00000
11110
00001
00110
00001
00001
00001
11110
00000
00000`,
    '4':`
00000
00000
00000
10000
10000
10000
10010
11111
00010
00010
00000
00000`,
    '5':`
00000
00000
00000
11111
10000
11110
00001
00001
00001
11110
00000
00000`,
    '6':`
00000
00000
00000
01110
10000
11110
10001
10001
10001
01110
00000
00000`,
    '7':`
00000
00000
00000
11111
00001
00010
00100
00100
00100
00100
00000
00000`,
    '8':`
00000
00000
00000
01110
10001
01110
10001
10001
10001
01110
00000
00000`,
    '9':`
00000
00000
00000
01110
10001
10001
10001
01111
00001
01110
00000
00000`,
    'a':`
00000
00000
00000
00000
00000
01111
10001
10001
10001
01111
00000
00000`,
    'b':`
00000
00000
00000
10000
10000
11110
10001
10001
10001
01110
00000
00000`,
    'c':`
00000
00000
00000
00000
00000
01111
10000
10000
10000
01111
00000
00000`,
    'd':`
00000
00000
00000
00001
00001
01111
10001
10001
10001
01111
00000
00000`,
    'e':`
00000
00000
00000
00000
00000
01110
10001
11111
10000
01110
00000
00000`,
    'f':`
00000
00000
00000
00011
00100
11111
00100
00100
00100
00100
00000
00000`,
    'g':`
00000
00000
00000
00000
00000
01111
10001
10001
10001
01111
00001
01110`,
    'h':`
00000
00000
00000
10000
10000
11110
10001
10001
10001
10001
00000
00000`,
    'i':`
00000
00000
00000
00100
00000
01100
00100
00100
00100
01110
00000
00000`,
    'j':`
00000
00000
00000
00100
00000
01100
00100
00100
00100
00100
10100
01000`,
    'k':`
00000
00000
00000
10000
10000
10001
10010
11100
10010
10001
00000
00000`,
    'l':`
00000
00000
00000
01100
00100
00100
00100
00100
00100
01110
00000
00000`,
    'm':`
00000
00000
00000
00000
00000
01010
10101
10101
10101
10101
00000
00000`,
    'n':`
00000
00000
00000
00000
00000
01110
10001
10001
10001
10001
00000
00000`,
    'o':`
00000
00000
00000
00000
00000
01110
10001
10001
10001
01110
00000
00000`,
    'p':`
00000
00000
00000
00000
00000
11110
10001
10001
10001
11110
10000
10000`,
    'q':`
00000
00000
00000
00000
00000
01111
10001
10001
10001
01111
00001
00001`,
    'r':`
00000
00000
00000
00000
00000
01111
10000
10000
10000
10000
00000
00000`,
    's':`
00000
00000
00000
00000
00000
01111
10000
01110
00001
11110
00000
00000`,
    't':`
00000
00000
00000
00100
00100
11111
00100
00100
00100
00011
00000
00000`,
    'u':`
00000
00000
00000
00000
00000
10001
10001
10001
10001
01111
00000
00000`,
    'v':`
00000
00000
00000
00000
00000
10001
10010
10100
11000
10000
00000
00000`,
    'w':`
00000
00000
00000
00000
00000
10101
10101
10101
10101
01010
00000
00000`,
    'x':`
00000
00000
00000
00000
00000
10001
01010
00100
01010
10001
00000
00000`,
    '×':`
00000
00000
00000
00000
00000
10001
01010
00100
01010
10001
00000
00000`,
    'y':`
00000
00000
00000
00000
00000
10001
10001
10001
10001
01111
00001
11110`,
    'z':`
00000
00000
00000
00000
00000
11111
00010
00100
01000
11111
00000
00000`,
    'A':`
00000
00000
00000
01110
10001
10001
10001
11111
10001
10001
00000
00000`,
    'B':`
00000
00000
00000
11110
10001
11110
10001
10001
10001
11110
00000
00000`,
    'C':`
00000
00000
00000
01111
10000
10000
10000
10000
10000
01111
00000
00000`,
    'D':`
00000
00000
00000
11110
10001
10001
10001
10001
10001
11110
00000
00000`,
    'E':`
00000
00000
00000
11111
10000
11111
10000
10000
10000
11111
00000
00000`,
    'F':`
00000
00000
00000
11111
10000
11111
10000
10000
10000
10000
00000
00000`,
    'G':`
00000
00000
00000
01111
10000
10000
10000
10011
10001
01111
00000
00000`,
    'H':`
00000
00000
00000
10001
10001
11111
10001
10001
10001
10001
00000
00000`,
    'I':`
00000
00000
00000
11111
00100
00100
00100
00100
00100
11111
00000
00000`,
    'J':`
00000
00000
00000
01111
00001
00001
00001
00001
00001
01110
00000
00000`,
    'K':`
00000
00000
00000
10001
10010
10100
11000
10100
10010
10001
00000
00000`,
    'L':`
00000
00000
00000
10000
10000
10000
10000
10000
10000
11111
00000
00000`,
    'M':`
00000
00000
00000
11111
10101
10101
10101
10101
10101
10101
00000
00000`,
    'N':`
00000
00000
00000
10001
11001
10101
10011
10001
10001
10001
00000
00000`,
    'O':`
00000
00000
00000
01110
10001
10001
10001
10001
10001
01110
00000
00000`,
    'P':`
00000
00000
00000
11110
10001
10001
10001
11110
10000
10000
00000
00000`,
    'Q':`
00000
00000
00000
01110
10001
10001
10001
10001
10101
01110
00100
00000`,
    'R':`
00000
00000
00000
11110
10001
10001
11110
10001
10001
10001
00000
00000`,
    'S':`
00000
00000
00000
01111
10000
01110
00001
00001
00001
11110
00000
00000`,
    'T':`
00000
00000
00000
11111
00100
00100
00100
00100
00100
00100
00000
00000`,
    'U':`
00000
00000
00000
10001
10001
10001
10001
10001
10001
01110
00000
00000`,
    'V':`
00000
00000
00000
10001
10001
10001
10001
10001
01010
00100
00000
00000`,
    'W':`
00000
00000
00000
10101
10101
10101
10101
10101
10101
01010
00000
00000`,
    'X':`
00000
00000
00000
10001
10001
01010
00100
01010
10001
10001
00000
00000`,
    'Y':`
00000
00000
00000
10001
10001
01010
00100
00100
00100
00100
00000
00000`,
    'Z':`
00000
00000
00000
11111
00001
00010
00100
01000
10000
11111
00000
00000`,
    '.':`
00000
00000
00000
00000
00000
00000
00000
00000
00000
00100
00000
00000`,
    '·':`
00000
00000
00000
00000
00000
00000
00100
00000
00000
00000
00000
00000`,
    '•':`
00000
00000
00000
00000
00000
01110
01110
01110
00000
00000
00000
00000`,
    '…':`
00000
00000
00000
00000
00000
00000
00000
00000
00000
10101
00000
00000`,
    '†':`
00000
00100
00100
01110
00100
00100
00100
00100
00100
00100
00000
00000`,
    '‡':`
00000
00100
00100
01110
00100
00100
00100
00100
01110
00100
00000
00000`,
    'ƒ':`
00000
00000
00000
00011
00100
11111
00100
00100
00100
00100
01000
00000`,
    '‚':`
00000
00000
00000
00000
00000
00000
00000
00000
00100
01100
00000
00000`,
    '„':`
00000
00000
00000
00000
00000
00000
00000
00000
01001
11011
00000
00000`,
    ',':`
00000
00000
00000
00000
00000
00000
00000
00000
00100
01100
00000
00000`,
    ';':`
00000
00000
00000
00000
00000
00100
00000
00000
00100
01100
00000
00000`,
    ':':`
00000
00000
00000
00000
00000
00100
00000
00000
00000
00100
00000
00000`,
    '?':`
00000
00000
00000
01110
10001
00001
00001
00110
00000
00100
00000
00000`,
    '¿':`
00000
00000
00000
00100
00000
01100
10000
10000
10001
01110
00000
00000`,
    '!':`
00000
00000
00000
00100
00100
00100
00100
00100
00000
00100
00000
00000`,
    '¡':`
00000
00000
00000
00100
00000
00100
00100
00100
00100
00100
00000
00000`,
    '@':`
00000
00000
00000
00000
00000
01110
10001
10111
10000
01110
00000
00000`,
    '£':`
00000
00000
00000
00000
00000
01110
01001
11100
01000
11111
00000
00000`,
    '$':`
00000
00000
00000
00000
00100
01111
10100
01110
00101
11110
00100
00000`,
    '%':`
00000
00000
00000
00000
00000
11001
11010
00100
01011
10011
00000
00000`,
    '‰':`
00000
00000
00000
00000
11001
11010
00100
01011
10011
00000
00011
00011`,
    '^':`
00000
00000
00000
00100
01010
00000
00000
00000
00000
00000
00000
00000`,
    '&':`
00000
00000
00000
00000
00000
01100
10000
01011
10010
01100
00000
00000`,
    '*':`
00000
00000
00000
00000
00000
01010
00100
01010
00000
00000
00000
00000`,
    '(':`
00000
00000
00000
00010
00100
00100
00100
00100
00100
00010
00000
00000`,
    ')':`
00000
00000
00000
01000
00100
00100
00100
00100
00100
01000
00000
00000`,
    '+':`
00000
00000
00000
00000
00000
00100
00100
11111
00100
00100
00000
00000`,
    '÷':`
00000
00000
00000
00000
00000
00100
00000
11111
00000
00100
00000
00000`,
    '±':`
00000
00000
00000
00000
00000
00100
00100
11111
00100
11111
00000
00000`,
    '-':`
00000
00000
00000
00000
00000
00000
00000
01110
00000
00000
00000
00000`,
    '–':`
00000
00000
00000
00000
00000
00000
00000
11110
00000
00000
00000
00000`,
    '—':`
00000
00000
00000
00000
00000
00000
00000
11111
00000
00000
00000
00000`,
    '_':`
00000
00000
00000
00000
00000
00000
00000
00000
00000
11111
00000
00000`,
    '=':`
00000
00000
00000
00000
00000
00000
11111
00000
11111
00000
00000
00000`,
    ' ':`
00000
00000
00000
00000
00000
00000
00000
00000
00000
00000
00000
00000`,
    '{':`
00000
00000
00000
00110
00100
00100
01100
00100
00100
00110
00000
00000`,
    '}':`
00000
00000
00000
01100
00100
00100
00110
00100
00100
01100
00000
00000`,
    '[':`
00000
00000
00000
00110
00100
00100
00100
00100
00100
00110
00000
00000`,
    ']':`
00000
00000
00000
01100
00100
00100
00100
00100
00100
01100
00000
00000`,
    '\'':`
00000
00000
00000
00100
00100
00100
00000
00000
00000
00000
00000
00000`,
    '‘':`
00000
00000
00000
00110
00100
00000
00000
00000
00000
00000
00000
00000`,
    '’':`
00000
00000
00000
00100
01100
00000
00000
00000
00000
00000
00000
00000`,
    '“':`
00000
00000
00000
11011
10010
00000
00000
00000
00000
00000
00000
00000`,
    '”':`
00000
00000
00000
01001
11011
00000
00000
00000
00000
00000
00000
00000`,
    '"':`
00000
00000
00000
01010
01010
01010
00000
00000
00000
00000
00000
00000`,
    '/':`
00000
00000
00000
00000
00000
00001
00010
00100
01000
10000
00000
00000`,
    '\\':`
00000
00000
00000
00000
00000
10000
01000
00100
00010
00001
00000
00000`,
    '|':`
00000
00000
00000
00000
00000
00100
00100
00100
00100
00100
00000
00000`,
    '¦':`
00000
00000
00000
00000
00100
00100
00000
00100
00100
00100
00000
00000`,
    '<':`
00000
00000
00000
00000
00000
00010
00100
01000
00100
00010
00000
00000`,
    '‹':`
00000
00000
00000
00000
00000
00000
00100
01000
00100
00000
00000
00000`,
    '«':`
00000
00000
00000
00000
00000
00000
01001
10010
01001
00000
00000
00000`,
    '>':`
00000
00000
00000
00000
00000
01000
00100
00010
00100
01000
00000
00000`,
    '›':`
00000
00000
00000
00000
00000
00000
00100
00010
00100
00000
00000
00000`,
    '»':`
00000
00000
00000
00000
00000
00000
10010
01001
10010
00000
00000
00000`,
    '~':`
00000
00000
00000
00000
00000
00000
01000
10101
00010
00000
00000
00000`,
    '˜':`
00000
00000
00000
00000
00000
01010
10100
00000
00000
00000
00000
00000`,
    '`':`
00000
00000
00000
00000
00000
01000
00100
00000
00000
00000
00000
00000`,
    '#':`
00000
00000
00000
00000
00000
01010
11111
01010
11111
01010
00000
00000`,
    'À':`
01000
00100
00000
01110
10001
10001
10001
11111
10001
10001
00000
00000`,
    'Á':`
00010
00100
00000
01110
10001
10001
10001
11111
10001
10001
00000
00000`,
    'Â':`
00100
01010
00000
01110
10001
10001
10001
11111
10001
10001
00000
00000`,
    'Ã':`
01000
10101
00010
01110
10001
10001
10001
11111
10001
10001
00000
00000`,
    'Ä':`
00000
01010
00000
01110
10001
10001
10001
11111
10001
10001
00000
00000`,
    'Å':`
00100
01010
00100
01110
10001
10001
10001
11111
10001
10001
00000
00000`,
    'Æ':`
00000
00000
00000
01111
10100
10100
10100
11111
10100
10111
00000
00000`,
    'Ç':`
00000
00000
00000
01111
10000
10000
10000
10000
10000
01111
00100
01000`,
    'È':`
01000
00100
00000
11111
10000
11111
10000
10000
10000
11111
00000
00000`,
    'É':`
00010
00100
00000
11111
10000
11111
10000
10000
10000
11111
00000
00000`,
    'Ê':`
00100
01010
00000
11111
10000
11111
10000
10000
10000
11111
00000
00000`,
    'Ë':`
00000
01010
00000
11111
10000
11111
10000
10000
10000
11111
00000
00000`,
    'Ì':`
01000
00100
00000
11111
00100
00100
00100
00100
00100
11111
00000
00000`,
    'Í':`
00010
00100
00000
11111
00100
00100
00100
00100
00100
11111
00000
00000`,
    'Î':`
00100
01010
00000
11111
00100
00100
00100
00100
00100
11111
00000
00000`,
    'Ï':`
00000
01010
00000
11111
00100
00100
00100
00100
00100
11111
00000
00000`,
    'Ð':`
00000
00000
00000
01110
01001
01001
11101
01001
01001
01110
00000
00000`,
    'Ñ':`
01001
10110
00000
10001
11001
10101
10011
10001
10001
10001
00000
00000`,
    'Ò':`
01000
00100
00000
01110
10001
10001
10001
10001
10001
01110
00000
00000`,
    'Ó':`
00010
00100
00000
01110
10001
10001
10001
10001
10001
01110
00000
00000`,
    'Ô':`
00100
01010
00000
01110
10001
10001
10001
10001
10001
01110
00000
00000`,
    'Õ':`
01001
10110
00000
01110
10001
10001
10001
10001
10001
01110
00000
00000`,
    'Ö':`
00000
01010
00000
01110
10001
10001
10001
10001
10001
01110
00000
00000`,
    'Ø':`
00000
00010
00100
01110
10101
10101
10101
10101
10101
01110
00100
01000`,
    'Ù':`
00000
01000
00100
10001
10001
10001
10001
10001
10001
01110
00000
00000`,
    'Ú':`
00000
00010
00100
10001
10001
10001
10001
10001
10001
01110
00000
00000`,
    'Û':`
00100
01010
00000
10001
10001
10001
10001
10001
10001
01110
00000
00000`,
    'Ü':`
00000
01010
00000
10001
10001
10001
10001
10001
10001
01110
00000
00000`,
    'Ý':`
00000
00000
00100
10001
10001
01010
00100
00100
00100
00100
00000
00000`,
    'Þ':`
00000
00000
10000
11110
10001
10001
10001
10001
10001
11110
10000
00000`,
    'ß':`
00000
00000
00000
01110
10001
10110
10001
10001
10001
10110
10000
00000`,
    'ẞ':`
00000
00000
00000
01110
10001
10110
10001
10001
10001
10110
00000
00000`,
    'à':`
00000
00000
01000
00100
00000
01111
10001
10001
10001
01111
00000
00000`,
    'á':`
00000
00000
00010
00100
00000
01111
10001
10001
10001
01111
00000
00000`,
    'â':`
00000
00000
00100
01010
00000
01111
10001
10001
10001
01111
00000
00000`,
    'ã':`
00000
00000
01001
10110
00000
01111
10001
10001
10001
01111
00000
00000`,
    'ä':`
00000
00000
00000
01010
00000
01111
10001
10001
10001
01111
00000
00000`,
    'å':`
00000
00100
01010
00100
00000
01111
10001
10001
10001
01111
00000
00000`,
    'æ':`
00000
00000
00000
00000
00000
01110
10101
10110
10100
01111
00000
00000`,
    'ç':`
00000
00000
00000
00000
00000
01111
10000
10000
10000
01111
00100
01000`,
    'è':`
00000
00000
01000
00100
00000
01110
10001
11111
10000
01110
00000
00000`,
    'é':`
00000
00000
00010
00100
00000
01110
10001
11111
10000
01110
00000
00000`,
    'ê':`
00000
00000
00100
01010
00000
01110
10001
11111
10000
01110
00000
00000`,
    'ë':`
00000
00000
00000
01010
00000
01110
10001
11111
10000
01110
00000
00000`,
    'ì':`
00000
00000
01000
00100
00000
01100
00100
00100
00100
01110
00000
00000`,
    'í':`
00000
00000
00010
00100
00000
01100
00100
00100
00100
01110
00000
00000`,
    'î':`
00000
00000
00100
01010
00000
01100
00100
00100
00100
01110
00000
00000`,
    'ï':`
00000
00000
00000
01010
00000
01100
00100
00100
00100
01110
00000
00000`,
    'ð':`
00000
00000
00010
00111
00010
01110
10010
10010
10010
01110
00000
00000`,
    'ñ':`
00000
00000
01001
10110
00000
01110
10001
10001
10001
10001
00000
00000`,
    'ò':`
00000
00000
01000
00100
00000
01110
10001
10001
10001
01110
00000
00000`,
    'ó':`
00000
00000
00010
00100
00000
01110
10001
10001
10001
01110
00000
00000`,
    'ô':`
00000
00000
00100
01010
00000
01110
10001
10001
10001
01110
00000
00000`,
    'õ':`
00000
00000
01001
10110
00000
01110
10001
10001
10001
01110
00000
00000`,
    'ö':`
00000
00000
00000
01010
00000
01110
10001
10001
10001
01110
00000
00000`,
    'ø':`
00000
00000
00000
00010
00100
01110
10101
10101
10101
01110
00100
01000`,
    'ù':`
00000
00000
00000
01000
00100
10001
10001
10001
10001
01111
00000
00000`,
    'ú':`
00000
00000
00000
00010
00100
10001
10001
10001
10001
01111
00000
00000`,
    'û':`
00000
00000
00100
01010
00000
10001
10001
10001
10001
01111
00000
00000`,
    'ü':`
00000
00000
00000
01010
00000
10001
10001
10001
10001
01111
00000
00000`,
    'ý':`
00000
00000
00000
00010
00100
10001
10001
10001
10001
01111
00001
11110`,
    'þ':`
00000
00000
00000
10000
10000
11110
10001
10001
10001
11110
10000
10000`,
    'ÿ':`
00000
00000
00000
01010
00000
10001
10001
10001
10001
01111
00001
11110`,
    'Ā':`
00000
01110
00000
01110
10001
10001
10001
11111
10001
10001
00000
00000`,
    'ā':`
00000
00000
00000
01110
00000
01111
10001
10001
10001
01111
00000
00000`,
    'Ă':`
01010
00100
00000
01110
10001
10001
10001
11111
10001
10001
00000
00000`,
    'ă':`
00000
00000
01010
00100
00000
01111
10001
10001
10001
01111
00000
00000`,
    'Ą':`
00000
00000
00000
01110
10001
10001
10001
11111
10001
10001
00010
00001`,
    'ą':`
00000
00000
00000
00000
00000
01111
10001
10001
10001
01111
00010
00001`,
    'Ć':`
00010
00100
00000
01111
10000
10000
10000
10000
10000
01111
00000
00000`,
    'ć':`
00000
00000
00010
00100
00000
01111
10000
10000
10000
01111
00000
00000`,
    'Ĉ':`
00100
01010
00000
01111
10000
10000
10000
10000
10000
01111
00000
00000`,
    'ĉ':`
00000
00000
00100
01010
00000
01111
10000
10000
10000
01111
00000
00000`,
    'Ċ':`
00000
00100
00000
01111
10000
10000
10000
10000
10000
01111
00000
00000`,
    'ċ':`
00000
00000
00000
00100
00000
01111
10000
10000
10000
01111
00000
00000`,
    'Č':`
01010
00100
00000
01111
10000
10000
10000
10000
10000
01111
00000
00000`,
    'č':`
00000
00000
01010
00100
00000
01111
10000
10000
10000
01111
00000
00000`,
    'Ď':`
01010
00100
00000
11110
10001
10001
10001
10001
10001
11110
00000
00000`,
    'ď':`
00000
00000
00000
00101
00101
01100
10100
10100
10100
01100
00000
00000`,
    'Đ':`
00000
00000
00000
01110
01001
01001
11101
01001
01001
01110
00000
00000`,
    'đ':`
00000
00000
00010
00111
00010
01110
10010
10010
10010
01110
00000
00000`,
    'Ē':`
00000
01110
00000
11111
10000
11111
10000
10000
10000
11111
00000
00000`,
    'ē':`
00000
00000
00000
01110
00000
01110
10001
11111
10000
01110
00000
00000`,
    'Ĕ':`
01010
00100
00000
11111
10000
11111
10000
10000
10000
11111
00000
00000`,
    'ĕ':`
00000
00000
01010
00100
00000
01110
10001
11111
10000
01110
00000
00000`,
    'Ė':`
00000
00100
00000
11111
10000
11111
10000
10000
10000
11111
00000
00000`,
    'ė':`
00000
00000
00000
00100
00000
01110
10001
11111
10000
01110
00000
00000`,
    'Ę':`
00000
00000
00000
11111
10000
11111
10000
10000
10000
11111
00010
00001`,
    'ę':`
00000
00000
00000
00000
00000
01110
10001
11111
10000
01110
00010
00001`,
    'Ě':`
01010
00100
00000
11111
10000
11111
10000
10000
10000
11110
00000
00000`,
    'ě':`
00000
00000
01010
00100
00000
01110
10001
11111
10000
01110
00000
00000`,
    'Ĝ':`
00100
01010
00000
01111
10000
10000
10000
10011
10001
01111
00000
00000`,
    'ĝ':`
00000
00000
00100
01010
00000
01111
10001
10001
10001
01111
00001
01110`,
    'Ğ':`
01010
00100
00000
01111
10000
10000
10000
10011
10001
01111
00000
00000`,
    'ğ':`
00000
00000
01010
00100
00000
01111
10001
10001
10001
01111
00001
01110`,
    'Ġ':`
00000
00100
00000
01111
10000
10000
10000
10011
10001
01111
00000
00000`,
    'ġ':`
00000
00000
00000
00100
00000
01111
10001
10001
10001
01111
00001
01110`,
    'Ģ':`
00000
00000
00000
01111
10000
10000
10000
10011
10001
01111
00000
01100`,
    'ģ':`
00010
00100
00000
01111
10000
10000
10000
10011
10001
01111
00000
00000`,
    'Ĥ':`
00100
01010
00000
10001
10001
11111
10001
10001
10001
10001
00000
00000`,
    'ĥ':`
00100
01010
00000
10000
10000
11110
10001
10001
10001
10001
00000
00000`,
    'Ħ':`
00000
00000
01010
11111
01010
01110
01010
01010
01010
01010
00000
00000`,
    'ħ':`
00000
00000
01000
11100
01000
01110
01001
01001
01001
01001
00000
00000`,
    'Ĩ':`
01001
10110
00000
11111
00100
00100
00100
00100
00100
11111
00000
00000`,
    'ĩ':`
01010
10100
00000
00100
00000
01100
00100
00100
00100
01110
00000
00000`,
    'Ī':`
00000
01110
00000
11111
00100
00100
00100
00100
00100
11111
00000
00000`,
    'ī':`
00000
00000
00000
01110
00000
01100
00100
00100
00100
01110
00000
00000`,
    'Ĭ':`
01010
00100
00000
11111
00100
00100
00100
00100
00100
11111
00000
00000`,
    'ĭ':`
00000
00000
01010
00100
00000
01100
00100
00100
00100
01110
00000
00000`,
    'Į':`
00000
00000
00000
11111
00100
00100
00100
00100
00100
11111
00010
00001`,
    'į':`
00000
00000
00000
00100
00000
01100
00100
00100
00100
01110
00010
00001`,
    'İ':`
00000
00100
00000
11111
00100
00100
00100
00100
00100
11111
00000
00000`,
    'ı':`
00000
00000
00000
00000
00000
01100
00100
00100
00100
01110
00000
00000`,
    'Ĳ':`
00000
00000
00000
10010
10010
10010
10010
10010
10010
10110
00000
00000`,
    'ĳ':`
00000
00000
00000
01001
00000
11001
01001
01001
01001
11101
00001
00010`,
    'Ĵ':`
00010
00101
00000
01111
00001
00001
00001
00001
00001
01110
00000
00000`,
    'ĵ':`
00000
00000
00100
01010
00000
01100
00100
00100
00100
00100
10100
01000`,
    'Ķ':`
00000
00000
00000
10001
10010
10100
11000
10100
10010
10001
00100
01000`,
    'ķ':`
00000
00000
00000
10000
10000
10001
10010
11100
10010
10001
00100
01000`,
    'ĸ':`
00000
00000
00000
00000
00000
10001
10010
11100
10010
10001
00000
00000`,
    'Ĺ':`
00000
00010
00100
10000
10000
10000
10000
10000
10000
11111
00000
00000`,
    'ĺ':`
00010
00100
00000
01100
00100
00100
00100
00100
00100
01110
00000
00000`,
    'Ļ':`
00000
00000
00000
10000
10000
10000
10000
10000
10000
11111
00000
00100`,
    'ļ':`
00000
00000
00000
01100
00100
00100
00100
00100
00100
01110
00000
00100`,
    'Ľ':`
00000
00000
00000
10010
10010
10000
10000
10000
10000
11111
00000
00000`,
    'ľ':`
00000
00000
00000
01101
00101
00100
00100
00100
00100
01110
00000
00000`,
    'Ŀ':`
00000
00000
00000
10000
10000
10100
10000
10000
10000
11111
00000
00000`,
    'ŀ':`
00000
00000
00000
01100
00100
00100
00101
00100
00100
01110
00000
00000`,
    'Ł':`
00000
00000
00000
01000
01010
01100
11000
01000
01000
01111
00000
00000`,
    'ł':`
00000
00000
00000
01100
00100
00100
00110
01100
00100
01110
00000
00000`,
    'Ń':`
00000
00010
00100
10001
11001
10101
10011
10001
10001
10001
00000
00000`,
    'ń':`
00000
00000
00010
00100
00000
01110
10001
10001
10001
10001
00000
00000`,
    'Ņ':`
00000
00000
00000
10001
11001
10101
10011
10001
10001
10001
00100
01000`,
    'ņ':`
00000
00000
00000
00000
00000
01110
10001
10001
10001
10001
00100
01000`,
    'Ň':`
00000
01010
00100
10001
11001
10101
10011
10001
10001
10001
00000
00000`,
    'ň':`
00000
00000
01010
00100
00000
01110
10001
10001
10001
10001
00000
00000`,
    'ŉ':`
00000
00000
00000
10000
10000
00110
01001
01001
01001
01001
00000
00000`,
    'Ŋ':`
00000
00000
00000
10001
11001
10101
10011
10001
10001
10001
00001
00010`,
    'ŋ':`
00000
00000
00000
00000
00000
01110
10001
10001
10001
10001
00001
00010`,
    'Ō':`
00000
01110
00000
01110
10001
10001
10001
10001
10001
01110
00000
00000`,
    'ō':`
00000
00000
00000
01110
00000
01110
10001
10001
10001
01110
00000
00000`,
    'Ŏ':`
01010
00100
00000
01110
10001
10001
10001
10001
10001
01110
00000
00000`,
    'ŏ':`
00000
00000
01010
00100
00000
01110
10001
10001
10001
01110
00000
00000`,
    'Ő':`
01001
10010
00000
01110
10001
10001
10001
10001
10001
01110
00000
00000`,
    'ő':`
00000
00000
01001
10010
00000
01110
10001
10001
10001
01110
00000
00000`,
    'Œ':`
00000
00000
00000
01111
10100
10100
10111
10100
10100
01111
00000
00000`,
    'œ':`
00000
00000
00000
00000
00000
01110
10101
10110
10100
01111
00000
00000`,
    'Ŕ':`
00010
00100
00000
11110
10001
10001
11110
10001
10001
10001
00000
00000`,
    'ŕ':`
00000
00000
00010
00100
00000
01111
10000
10000
10000
10000
00000
00000`,
    'Ŗ':`
00000
00000
00000
11110
10001
10001
11110
10001
10001
10001
00100
01000`,
    'ŗ':`
00000
00000
00000
00000
00000
01111
10000
10000
10000
10000
00100
01000`,
    'Ř':`
01010
00100
00000
11110
10001
10001
11110
10001
10001
10001
00000
00000`,
    'ř':`
00000
00000
01010
00100
00000
01111
10000
10000
10000
10000
00000
00000`,
    'Ś':`
00010
00100
00000
01111
10000
01110
00001
00001
00001
11110
00000
00000`,
    'ś':`
00000
00000
00010
00100
00000
01111
10000
01110
00001
11110
00000
00000`,
    'Ŝ':`
00100
01010
00000
01111
10000
01110
00001
00001
00001
11110
00000
00000`,
    'ŝ':`
00000
00000
00100
01010
00000
01111
10000
01110
00001
11110
00000
00000`,
    'Ş':`
00000
00000
00000
01111
10000
01110
00001
00001
00001
11110
00100
00000`,
    'ş':`
00000
00000
00000
00000
00000
01111
10000
01110
00001
11110
00100
01000`,
    'Š':`
01010
00100
00000
01111
10000
01110
00001
00001
00001
11110
00000
00000`,
    'š':`
00000
00000
01010
00100
00000
01111
10000
01110
00001
11110
00000
00000`,
    'Ţ':`
00000
00000
00000
11111
00100
00100
00100
00100
00100
00100
00010
00100`,
    'ţ':`
00000
00000
00000
00100
00100
11111
00100
00100
00100
00011
00000
01100`,
    'Ť':`
01010
00100
00000
11111
00100
00100
00100
00100
00100
00100
00000
00000`,
    'ť':`
00000
00000
00001
00101
00100
11111
00100
00100
00100
00011
00000
00000`,
    'Ŧ':`
00000
00000
00000
11111
00100
00100
01110
00100
00100
00100
00000
00000`,
    'ŧ':`
00000
00000
00000
00100
00100
11111
00100
01110
00100
00011
00000
00000`,
    'Ũ':`
01001
10110
00000
10001
10001
10001
10001
10001
10001
01110
00000
00000`,
    'ũ':`
00000
00000
01001
10110
00000
10001
10001
10001
10001
01111
00000
00000`,
    'Ū':`
00000
01110
00000
10001
10001
10001
10001
10001
10001
01110
00000
00000`,
    'ū':`
00000
00000
00000
01110
00000
10001
10001
10001
10001
01111
00000
00000`,
    'Ŭ':`
01010
00100
00000
10001
10001
10001
10001
10001
10001
01110
00000
00000`,
    'ŭ':`
00000
00000
01010
00100
00000
10001
10001
10001
10001
01111
00000
00000`,
    'Ů':`
00100
01010
00100
10001
10001
10001
10001
10001
10001
01110
00000
00000`,
    'ů':`
00000
00000
00100
01010
00100
10001
10001
10001
10001
01111
00000
00000`,
    'Ű':`
01001
10010
00000
10001
10001
10001
10001
10001
10001
01110
00000
00000`,
    'ű':`
00000
00000
01001
10010
00000
10001
10001
10001
10001
01111
00000
00000`,
    'Ų':`
00000
00000
00000
10001
10001
10001
10001
10001
10001
01110
00100
00010`,
    'ų':`
00000
00000
00000
00000
00000
10001
10001
10001
10001
01111
00010
00001`,
    'Ŵ':`
00100
01010
00000
10101
10101
10101
10101
10101
10101
01010
00000
00000`,
    'ŵ':`
00000
00000
00100
01010
00000
10101
10101
10101
10101
01010
00000
00000`,
    'Ŷ':`
00100
01010
00000
10001
10001
01010
00100
00100
00100
00100
00000
00000`,
    'ŷ':`
00000
00000
00100
01010
00000
10001
10001
10001
10001
01111
00001
11110`,
    'Ÿ':`
00000
01010
00000
10001
10001
01010
00100
00100
00100
00100
00000
00000`,
    'Ź':`
00010
00100
00000
11111
00001
00010
00100
01000
10000
11111
00000
00000`,
    'ź':`
00000
00000
00010
00100
00000
11111
00010
00100
01000
11111
00000
00000`,
    'Ż':`
00000
00100
00000
11111
00001
00010
00100
01000
10000
11111
00000
00000`,
    'ż':`
00000
00000
00000
00100
00000
11111
00010
00100
01000
11111
00000
00000`,
    'Ž':`
01010
00100
00000
11111
00001
00010
00100
01000
10000
11111
00000
00000`,
    'ž':`
00000
00000
01010
00100
00000
11111
00010
00100
01000
11111
00000
00000`,
    
    '€':`
00000
00000
00000
00111
01000
11110
01000
11110
01000
00111
00000
00000`,
    
    '™':`
00000
11111
00100
00100
00100
00000
01010
10101
10101
10101
00000
00000`,
    '¢':`
00000
00000
00000
00010
00100
01111
10100
10100
10100
01111
00100
01000`,
    
    '¤':`
00000
00000
00000
00000
10001
01110
10001
10001
01110
10001
00000
00000`,
    '¥':`
00000
00000
10001
01010
00100
01110
00100
01110
00100
00000
00000`,
    
    '§':`
00000
00000
00000
01110
10000
01110
10001
01110
00001
01110
00000
00000`,
    '¨':`
00000
00000
00000
01010
00000
00000
00000
00000
00000
00000
00000
00000`,
    '©':`
00000
00000
00000
01110
10001
10111
10101
10111
10001
01110
00000
00000`,
    '®':`
00000
00000
00000
01110
10001
10111
10101
10101
10001
01110
00000
00000`,
    'ª':`
00000
01110
00010
01110
01010
01110
00000
00000
00000
00000
00000
00000`,
    'º':`
00000
00100
01010
01010
01010
00100
00000
00000
00000
00000
00000
00000`,
    
    '¬':`
00000
00000
00000
00000
00000
00000
00000
01110
00010
00000
00000
00000`,
    '¯':`
00000
00000
00000
01110
00000
00000
00000
00000
00000
00000
00000
00000`,
    '°':`
00000
00000
00100
01010
00100
00000
00000
00000
00000
00000
00000
00000`,
}

"""#
}

class ExportsImpl: NSObject, JSExport {
    
    
}

extension JSContext {
    func setObject(object: Any, withName:String) {
        setObject(object, forKeyedSubscript: withName as NSCopying & NSObjectProtocol)
    }
}

extension JSValue {
    func setObject(object: Any, withName:String) {
        setObject(object, forKeyedSubscript: withName as NSCopying & NSObjectProtocol)
    }
}

struct Program: Node {
    var sourceType: String
    var body: [any Node]
    
    init(_ node: [String:Any]) throws {
        sourceType = try Self.decode(\.sourceType, value: node["sourceType"])
        body = try Self.decode(\.body, value: node["body"])
    }
    
    var swiftCode: String {
        body
            .map { $0.swiftCode + "\n" }
            .joined()
    }
}

struct VariableDeclaration: Node {
    var declarations: [any Node]
    var kind: String
    
    
    init(_ node: [String:Any]) throws {
        declarations = try Self.decode(\.declarations, value: node["declarations"])
        kind = try Self.decode(\.kind, value: node["kind"])
    }
    
    var swiftCode: String {
        declarations
            .map { kind + " " + $0.swiftCode + "\n" }
            .joined()
    }
}

struct VariableDeclarator: Node {
    var id: any Node
    var `init`: (any Node)?
    
    
    init(_ node: [String:Any]) throws {
        id = try Self.decode(\.id, value: node["id"])
        `init` = try Self.decode(\.`init`, value: node["init"])
    }
    
    var swiftCode: String {
        if let `init` {
            return id.swiftCode + " = " + `init`.swiftCode
        } else {
            return id.swiftCode
        }
    }
}

struct Identifier: Node {
    var name: String
    
    init(_ node: [String:Any]) throws {
        name = try Self.decode(\.name, value: node["name"])
    }
    
    var swiftCode: String {
        name
    }
}

struct Literal: Node {
    var value: Any?
    var raw: String
    
    init(_ node: [String:Any]) throws {
        value = try Self.decode(\.value, value: node["value"])
        raw = try Self.decode(\.raw, value: node["raw"])
    }
    
    var swiftCode: String {
        if raw == "null" {
            return "nil"
        } else {
            return raw
        }
    }
}

struct ExpressionStatement: Node {
    var expression: any Node
//    var directive: String?
    
    init(_ node: [String:Any]) throws {
        expression = try Self.decode(\.expression, value: node["expression"])
//        directive = try Self.decode(\.directive, value: node["directive"])
    }
    
    var swiftCode: String {
        expression.swiftCode
    }
}

struct BinaryExpression: Node {
    var `operator`: String
    var left: any Node
    var right: any Node

    init(_ node: [String:Any]) throws {
        `operator` = try Self.decode(\.`operator`, value: node["operator"])
        left = try Self.decode(\.left, value: node["left"])
        right = try Self.decode(\.right, value: node["right"])
    }
    
    var swiftCode: String {
        let op: String
        switch `operator` {
//        case "instanceof":
//        case "in":
//        case "+":
//        case "-":
//        case "*":
//        case "/":
//        case "%":
//        case "**":
//        case "|":
//        case "^":
//        case "&":
//        case "==":
//        case "!=":
//        case "===":
        case "!==": op = "!="
//        case "<":
//        case ">":
//        case "<=":
//        case "<<":
//        case ">>":
//        case ">>>":
        default: op = `operator`
        }
        
        
        return left.swiftCode + " " + op + " " + right.swiftCode
    }
}

struct BlockStatement: Node {
    var body: [any Node]
    
    init(_ node: [String:Any]) throws {
        body = try Self.decode(\.body, value: node["body"])
    }
    
    var swiftCode: String {
        body.map(\.swiftCode).joined(separator: "\n")
    }
}

struct FunctionDeclaration: Node {
    var id: Identifier?
    var params: [any Node]
    var body: BlockStatement
    var generator: Bool
    var async: Bool
    
    init(_ node: [String : Any]) throws {
        id = try Self.decode(\.id, value: node["id"])
        params = try Self.decode(\.params, value: node["params"])
        body = try Self.decode(\.body, value: node["body"])
        generator = try Self.decode(\.generator, value: node["generator"])
        async = try Self.decode(\.async, value: node["async"])
    }
    
    var swiftCode: String {
        if let id {
            let paramsSwiftCode = params.map {
                "_ "+$0.swiftCode + ": \(id.swiftCode.capitalized)\($0.swiftCode.capitalized)"
            }.joined(separator: ", ")
            
            return "func " + id.swiftCode + "("+paramsSwiftCode+") -> \(id.swiftCode.capitalized) {\n" + body.swiftCode + "\n}"
        } else {
            fatalError()
        }
    }
}

struct ReturnStatement: Node {
    var argument: (any Node)?
    
    init(_ node: [String : Any]) throws {
        argument = try Self.decode(\.argument, value: node["argument"])
    }
    
    var swiftCode: String {
        if let argument {
            return "return "+argument.swiftCode
        } else {
            return "return"
        }
    }
}

struct MemberExpression: Node {
    var computed: Bool
    var object: any Node
    var property: any Node
    
    init(_ node: [String : Any]) throws {
        computed = try Self.decode(\.computed, value: node["computed"])
        object = try Self.decode(\.object, value: node["object"])
        property = try Self.decode(\.property, value: node["property"])
    }
    
    var swiftCode: String {
        object.swiftCode + "." + property.swiftCode
    }
}

struct CallExpression: Node {
    var callee: any Node
    var arguments: [any Node]
    
    init(_ node: [String : Any]) throws {
        callee = try Self.decode(\.callee, value: node["callee"])
        arguments = try Self.decode(\.arguments, value: node["arguments"])
    }
    
    var swiftCode: String {
        callee.swiftCode + "(" + arguments.map(\.swiftCode).joined(separator: ", ") + ")"
    }
}

struct ObjectExpression: Node {
    var properties: [Property]
    
    init(_ node: [String : Any]) throws {
        properties = try Self.decode(\.properties, value: node["properties"])
    }
    
    var swiftCode: String {
        properties.map(\.swiftCode).joined(separator: "\n")
    }
    
}

struct Property: Node {
    
    var key: any Node
    var computed: Bool
    var value: (any Node)?
    var kind: String
    var shorthand: Bool
    
    
    init(_ node: [String : Any]) throws {
        key = try Self.decode(\.key, value: node["key"])
        computed = try Self.decode(\.computed, value: node["computed"])
        value = try Self.decode(\.value, value: node["value"])
        kind = try Self.decode(\.kind, value: node["kind"])
        shorthand = try Self.decode(\.shorthand, value: node["shorthand"])
    }
    
    var swiftCode: String {
        fatalError("\(value)")
        key.swiftCode + " : *** " + value!.swiftCode
    }
}

struct TemplateLiteral: Node {
    init(_ node: [String : Any]) throws {
        quasis = try Self.decode(\.quasis, value: node["quasis"])
        expressions = try Self.decode(\.expressions, value: node["expressions"])
    }
    
    var swiftCode: String {
        expressions.map(\.swiftCode).joined(separator: " *** ")
    }
    
    var quasis: [String: Any]
    var expressions: [any Node]
}

protocol RuntimeDecoder {
    static func decode<T>(from decoder: Decoder) throws -> T
}

@propertyWrapper
struct RuntimeDecodable<R: RuntimeDecoder, V>: Decodable {
    var wrappedValue: V {
        get {
            _wrappedValue!
        }
        set {
            _wrappedValue = newValue
        }
    }
    
    var _wrappedValue: V?
    
    init(_ runtimeDecoder: R.Type) {
        
    }
    
    init(from decoder: Decoder) throws {
        self = try R.decode(from: decoder)
    }
}

struct NodeDecoder: RuntimeDecoder {
    static func decode<T>(from decoder: Decoder) throws -> T {
        fatalError()
    }
}


protocol Node {
    init(_ node: [String:Any]) throws
    var swiftCode: String { get }
}

extension Node {
    static func decode<T>(_ aType: KeyPath<Self,T>, value: Any?) throws -> T {
        if let value = value as? T {
            return value
        } else if type(of: aType).valueType is [any Node].Type {
            return try decode(node: value) as! T
        } else if type(of: aType).valueType is (any Node).Type {
            return try decode(node: value) as! T
        } else if type(of: aType).valueType is (any Node)?.Type {
            return try decode(node: value) as! T
        } else if type(of: aType).valueType is (Identifier)?.Type {
            return try decode(node: value) as! T
        } else if type(of: aType).valueType is (BlockStatement).Type {
            return try decode(node: value) as! T
        } else if type(of: aType).valueType is (Property).Type {
            return try decode(node: value) as! T
        } else if type(of: aType).valueType is [Property].Type {
            return try decode(node: value) as! T
        }
        fatalError("\(aType): \(String(describing: value))")
    }
    
    
    
    static func decode(node: Any?) throws -> Any? {
        if let object = node as? [String: Any] {
            guard let type = object["type"] as? String else {
                fatalError()
            }
            
            let nodeTypes: [any Node.Type] = [
                BinaryExpression.self,
                BlockStatement.self,
                CallExpression.self,
                ExpressionStatement.self,
                FunctionDeclaration.self,
                Identifier.self,
                Literal.self,
                MemberExpression.self,
                ObjectExpression.self,
                Program.self,
                Property.self,
                ReturnStatement.self,
                TemplateLiteral.self,
//                TemplateElement.self,
                VariableDeclaration.self,
                VariableDeclarator.self,
            ]
            
            guard let nodeType = nodeTypes.first(where: { "\($0)" == type }) else {
                fatalError("Unknown type: \(type)")
            }
                        
            return try nodeType.init(object)
        } else if let array = node as? [Any] {
            return try array.map(decode)
        } else {
            return node
        }
    }
}
